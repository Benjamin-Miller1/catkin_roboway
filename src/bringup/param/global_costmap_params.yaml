# ns : global_costmap

# The global frame for the costmap to operate in. (string, default: "/map")
global_frame: map

# The name of the frame for the base link of the robot.(string, default: "base_link")
robot_base_frame: base_link

# distance a circular robot should be clear of the obstacle (kobuki: 0.18)
# robot_radius: 0.20  
footprint: [[0.50, 0.35], [0.50, -0.35], [-0.50, -0.35], [-0.50, 0.35]]  # if the robot is not circular

# used for obstacle_layer, 3D->voxel 2D->other
map_type: costmap

# Specifies the delay in transform (tf) data that is tolerable in seconds. This parameter serves as a safeguard to losing a link in the tf tree while still allowing an amount of latency the user is comfortable with to exist in the system. For example, a transform being 0.2 seconds out-of-date may be tolerable, but a transform being 8 seconds out of date is not. If the tf transform between the coordinate frames specified by the global_frame and robot_base_frame parameters is transform_tolerance seconds older than ros::Time::now(), then the navigation stack will stop the robot.(double, default: 0.2)
transform_tolerance: 0.5

# The frequency in Hz for the map to be updated.(double, default: 5.0)
update_frequency: 2.0

# The frequency in Hz for the map to be publish display information.(double, default: 0.0)
publish_frequency: 1.0

# Whether or not to use a rolling window version of the costmap. If the static_map parameter is set to true, this parameter must be set to false. (bool, default: false)
rolling_window: false
static_map: true

# If true the full costmap is published to "~<name>/grid" every update. If false only the part of the costmap that has changed is published on the "~<name>/grid_updates" topic. (bool, default: false)
always_send_full_costmap: false

# Sequence of plugin specifications, one per layer. Each specification is a dictionary with name and type fields. The name is used to define the parameter namespace for the plugin.
plugins:
  - {name: static_layer,            type: "costmap_2d::StaticLayer"}
#  - {name: obstacle_layer,          type: "costmap_2d::ObstacleLayer"}
#  - {name: inflation_layer,         type: "costmap_2d::InflationLayer"}

# The width of the map in meters.(int, default: 10)
width: 10

# The height of the map in meters.(int, default: 10)
height: 10

# The resolution of the map in meters/cell. (double, default: 0.05)
resolution: 0.1

# The x origin of the map in the global frame in meters. (double, default: 0.0)
origin_x: 0.0

# The y origin of the map in the global frame in meters. (double, default: 0.0)
origin_y: 0.0

#############################
#
#        static_layer
#
#############################
static_layer:
# The value for which a cost should be considered unknown when reading in a map from the map server. If the costmap is not tracking unknown space, costs of this value will be considered occupied. A value of zero also results in this parameter being unused. (int, default: -1)
  unknown_cost_value: -1

# The threshold value at which to consider a cost lethal when reading in a map from the map server.(int, default: 100)
  lethal_cost_threshold: 100

# The topic that the costmap subscribes to for the static map. This parameter is useful when you have multiple costmap instances within a single node that you want to use different static maps. (string, default: "map")
  map_topic: show_map

# Only subscribe to the first message on the map topic, ignoring all subsequent messages (bool, default: false)
  first_map_only: false

# In addition to map_topic, also subscribe to map_topic + "_updates" (bool, default: false)
  subscribe_to_updates: false

# If true, unknown values in the map messages are translated directly to the layer. Otherwise, unknown values in the map message are translated as FREE_SPACE in the layer.  (bool, default: true)
  track_unknown_space: true

# Only matters if the static layer is not the bottom layer. If true, only the maximum value will be written to the master costmap. (bool, default: false)
  use_maximum: false

# If true, translates all map message values to NO_INFORMATION/FREE_SPACE/LETHAL_OBSTACLE (three values). If false, a full spectrum of intermediate values is possible. (bool, default: true)
  trinary_costmap: true
